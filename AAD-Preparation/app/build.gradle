apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.catherine.materialdesignapp"
        minSdkVersion rootProject.ext.minSdkVersion
        // get it 17 or higher to support right-to-left layout features
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
            }
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
                // mips, mips64, armeabi
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
//            shrinkResources true // resource shrinker cannot be used for multi-api applications
            pseudoLocalesEnabled true
            manifestPlaceholders = [extractNativeLibs: false]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            minifyEnabled true
//            shrinkResources true // resource shrinker cannot be used for multi-api applications
            pseudoLocalesEnabled false
            manifestPlaceholders = [extractNativeLibs: false]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    aaptOptions {
        cruncherEnabled = false // crunch PNG files
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testBuildType = "debug"
    testOptions {
        execution "ANDROIDX_TEST_ORCHESTRATOR"
        resultsDir "$rootDir/test-results"
        reportDir "$rootDir/test-reports"
        unitTests {
            includeAndroidResources = true
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation project(path: ':messagecenter')

        // Libraries which can be re-used in other modules should use the `api` keyword.
        // This way they can be shared with dependent feature modules.
        implementation "com.facebook.fresco:fresco:${rootProject.ext.fresco}"
        implementation "jp.wasabeef:fresco-processors:${rootProject.ext.frescoProcessors}"
        implementation "com.google.firebase:firebase-database:${rootProject.ext.firebaseVersion}"
        implementation "androidx.recyclerview:recyclerview-selection:${rootProject.ext.recyclerviewSelection}"
        // To support DayNight style, update to at lease 1.1.0-alpha02
        api "com.google.android.material:material:${rootProject.ext.material}"
        api "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttp}"
        api "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpLoggingInterceptor}"
        api "com.google.code.gson:gson:${rootProject.ext.gson}"
        api "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayout}"

        // Unit tests
        // Robolectric environment
        androidTestImplementation "androidx.test:core:${rootProject.ext.testCore}"
        androidTestImplementation "androidx.test:runner:${rootProject.ext.androidx_test}"
        androidTestImplementation "androidx.test:rules:${rootProject.ext.androidx_test}"

        // JUnit 4 framework
        testImplementation "junit:junit:${rootProject.ext.junit}"
        testImplementation "org.mockito:mockito-core:${rootProject.ext.mockito}"

        // JetPack
        // Room components
        implementation "androidx.room:room-runtime:${rootProject.ext.roomVersion}"
        annotationProcessor "androidx.room:room-compiler:${rootProject.ext.roomVersion}"
        androidTestImplementation "androidx.room:room-testing:${rootProject.ext.roomVersion}"

        // Lifecycle components
        implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.archLifecycleVersion}"
        implementation "androidx.lifecycle:lifecycle-viewmodel:${rootProject.ext.archLifecycleVersion}"
        annotationProcessor "androidx.lifecycle:lifecycle-common-java8:${rootProject.ext.archLifecycleVersion}"

        // dynamic delivery
        implementation "com.google.android.play:core:${rootProject.ext.playcore}"
        // bundle's dependencies
        api "com.android.support:customtabs:${rootProject.ext.material}"
        api "com.google.android.gms:play-services-maps:${rootProject.ext.googleMap}"
    }

    // dynamic delivery
    dynamicFeatures = [":bbc_news", ":tour_guide", ":assets", ":open_weather"]


}
